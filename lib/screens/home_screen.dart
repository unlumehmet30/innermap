import 'package:flutter/material.dart';
import 'package:innermap/core/services/recording_services.dart';
import 'package:innermap/core/services/http_services.dart';
import 'package:innermap/models/concept_edge.dart';
import 'package:innermap/models/concept_node.dart';
import 'package:innermap/screens/map_screen.dart'; // Navigasyon iÃ§in eklendi


class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final RecordingService _recordingService = RecordingService();
  final HttpService _httpService = HttpService();
  final TextEditingController _textController = TextEditingController();

  // --- Durum YÃ¶netimi ---
  bool _isRecording = false; 
  bool _isProcessing = false; 
  String _recognizedText =
      "LÃ¼tfen fikrinizi sesli veya yazÄ±lÄ± olarak paylaÅŸÄ±n..."; 

  // --- YardÄ±mcÄ± Fonksiyon: Veriyi Ã‡Ã¶zÃ¼mle ve Harita EkranÄ±na YÃ¶nlendir ---
  void _navigateToMap(Map<String, dynamic> data) {
    
    // JSON listelerini Dart modellerine Ã§evir
    final List<ConceptNode> nodes = (data['nodes'] as List)
        .map((item) => ConceptNode.fromJson(item as Map<String, dynamic>))
        .toList();
    
    final List<ConceptEdge> edges = (data['edges'] as List)
        .map((item) => ConceptEdge.fromJson(item as Map<String, dynamic>))
        .toList();

    // Harita ekranÄ±na yÃ¶nlendir ve veriyi gÃ¶nder
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => MapScreen(nodes: nodes, edges: edges),
      ),
    );
    
    // YÃ¶nlendirme sonrasÄ± ekran durumunu sÄ±fÄ±rla
    setState(() {
      _isProcessing = false;
      _recognizedText = "Analiz tamamlandÄ±. SonuÃ§ Harita ekranÄ±nda.";
    });
  }


  // 1. Ses KaydÄ±nÄ± BaÅŸlat/Durdur
  void _toggleRecording() async {
    if (_isProcessing) return; 

    if (!_isRecording) {
      // KAYDI BAÅžLAT
      // ... (KayÄ±t baÅŸlatma mantÄ±ÄŸÄ± aynÄ± kalÄ±r)
      final hasPermission = await _recordingService.checkPermission();
      if (!hasPermission) {
        setState(() { _recognizedText = "Hata: Mikrofon izni gereklidir."; });
        return;
      }
      
      final filePath = await _recordingService.startRecording();
      
      setState(() {
        _isRecording = true;
        _recognizedText = filePath != null ? "Dinliyorum... KonuÅŸun." : "KayÄ±t baÅŸlatÄ±lamadÄ±.";
      });

    } else {
      // KAYDI DURDUR, GÃ–NDER VE ANALÄ°Z ET
      setState(() {
        _isRecording = false;
        _isProcessing = true;
        _recognizedText = "Ses kaydÄ± tamamlandÄ±. Metin analiz ediliyor...";
      });

      final filePath = await _recordingService.stopRecording();
      
      if (filePath != null) {
        // Backend'e GÃ¶nderme (Åžimdilik Transkripsiyon AlÄ±nÄ±yor)
        final transcriptionResponse = await _httpService.uploadAudioForTranscription(filePath);
        
        // ðŸš¨ YENÄ° MANTIK: Transkripsiyon metnini LLM'e gÃ¶nderme
        if (transcriptionResponse != null && transcriptionResponse.containsKey('transcript')) {
            final transcript = transcriptionResponse['transcript'] as String;
            
            // LLM analizini baÅŸlat
            final llmAnalysisData = await _httpService.sendTextForAnalysis(transcript);

            if (llmAnalysisData != null) {
                // BaÅŸarÄ±lÄ±: Harita ekranÄ±na yÃ¶nlendir
                _navigateToMap(llmAnalysisData);
            } else {
                // LLM'den hata geldi
                setState(() {
                    _isProcessing = false;
                    _recognizedText = "Hata: LLM Analizi baÅŸarÄ±sÄ±z oldu.";
                });
            }

        } else {
            // Transkripsiyon hatasÄ±
            setState(() {
                _isProcessing = false;
                _recognizedText = "KayÄ±t veya Transkripsiyon hatasÄ±.";
            });
        }
      } else {
        setState(() {
          _isProcessing = false;
          _recognizedText = "KayÄ±t dosyasÄ± oluÅŸturulamadÄ± veya bulunamadÄ±.";
        });
      }
    }
  }

  // 2. Metin GiriÅŸini Onayla (YazÄ±lÄ± GiriÅŸ)
  void _processText(String text) async {
    if (text.trim().isEmpty || _isRecording || _isProcessing) return;

    setState(() {
      _isProcessing = true;
      _recognizedText = "YazÄ±lÄ± metin alÄ±ndÄ±. Analiz ediliyor...";
    });

    final llmAnalysisData = await _httpService.sendTextForAnalysis(text);

    if (llmAnalysisData != null) {
        _navigateToMap(llmAnalysisData);
        _textController.clear();
    } else {
        setState(() {
            _isProcessing = false;
            _recognizedText = "Hata: LLM Analizi baÅŸarÄ±sÄ±z oldu.";
        });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Mind Map MVP - Fikir GiriÅŸi'),
        centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Metin Girdi AlanÄ± (YazÄ±lÄ± GiriÅŸ)
            TextField(
              controller: _textController,
              decoration: InputDecoration(
                labelText: 'Fikrinizi buraya yazÄ±n...',
                suffixIcon: IconButton(
                  icon: const Icon(Icons.send),
                  onPressed: () => _processText(_textController.text),
                ),
                border: const OutlineInputBorder(),
              ),
              onSubmitted: _processText,
              enabled: !_isProcessing && !_isRecording, 
            ),

            const SizedBox(height: 24),

            const Text(
              "Sistem Durumu/Geri Bildirim:",
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),

            const SizedBox(height: 8),

            // Ã‡Ã¶zÃ¼mlenmiÅŸ Metin/Geri Bildirim AlanÄ±
            Expanded(
              child: Container(
                padding: const EdgeInsets.all(12),
                width: double.infinity,
                decoration: BoxDecoration(
                  color: Colors.grey[100],
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.grey.shade300),
                ),
                child: SingleChildScrollView(
                  child: Text(
                    _isProcessing ? 'Ä°ÅŸleniyor...' : _recognizedText,
                    style: const TextStyle(fontSize: 16, color: Colors.black87),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),

      // Ses KayÄ±t Butonu (Floating Action Button)
      floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,
      floatingActionButton: Padding(
        padding: const EdgeInsets.all(8.0),
        child: FloatingActionButton.extended(
          onPressed: _toggleRecording,
          backgroundColor: _isProcessing 
              ? Colors.grey 
              : (_isRecording ? Colors.red.shade600 : Colors.blue.shade600),
          foregroundColor: Colors.white,

          label: Text(_isProcessing 
              ? "Ä°ÅŸleniyor..."
              : (_isRecording ? "KaydÄ± Durdur" : "KonuÅŸmaya BaÅŸla")),
          icon: Icon(_isProcessing 
              ? Icons.hourglass_top 
              : (_isRecording ? Icons.stop : Icons.mic)),
        ),
      ),

      // Alt Navigasyon Ã‡ubuÄŸu
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: 0, 
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.mic), label: 'GiriÅŸ'),
          BottomNavigationBarItem(icon: Icon(Icons.hub), label: 'Harita'),
          BottomNavigationBarItem(icon: Icon(Icons.history), label: 'GeÃ§miÅŸ'),
        ],
        onTap: (index) {
          // Ä°leride Sayfa YÃ¶nlendirmeleri Buraya Gelecek
        },
      ),
    );
  }
}